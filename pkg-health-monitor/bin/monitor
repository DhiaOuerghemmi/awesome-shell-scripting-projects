#!/usr/bin/env bash
#
# Core launcher for Package Manager Health Monitor
set -euo pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEFAULT_CONF="${SCRIPT_DIR}/../configs/monitor.conf"

CONFIG_FILE=""
DRY_RUN=false

function usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

Options:
  -c, --config PATH    Path to config file (default: ${DEFAULT_CONF})
  -n, --dry-run        Parse config and print values without executing checks
  -h, --help           Show this help message and exit
EOF
}

# --- argument parsing (unchanged) ---
while [[ $# -gt 0 ]]; do
  case "$1" in
    -c|--config) CONFIG_FILE="$2"; shift 2;;
    -n|--dry-run) DRY_RUN=true; shift;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown option: $1" >&2; usage; exit 1;;
  esac
done

# --- config loading (unchanged) ---
if [[ -z "${CONFIG_FILE}" ]]; then
  CONFIG_FILE="${DEFAULT_CONF}"
fi
if [[ ! -f "${CONFIG_FILE}" ]]; then
  echo "Config file not found: ${CONFIG_FILE}" >&2
  exit 2
fi
# shellcheck source=/dev/null
source "${CONFIG_FILE}"

# --- source our new check scripts ---
# shellcheck source=../scripts/apt_check.sh
source "${SCRIPT_DIR}/../scripts/apt_check.sh"
# shellcheck source=../scripts/yum_check.sh
source "${SCRIPT_DIR}/../scripts/yum_check.sh"
# shellcheck source=../scripts/dnf_check.sh
source "${SCRIPT_DIR}/../scripts/dnf_check.sh"

if [[ "${DRY_RUN}" == true ]]; then
  echo "⚙️  Dry-run mode: config loaded, check functions sourced."
  declare -p CHECK_INTERVAL EMAIL_RECIPIENT SLACK_WEBHOOK_URL PACKAGES_TO_CHECK
  exit 0
fi

# (Next up: invoke apt_check, yum_check, or dnf_check based on PACKAGES_TO_CHECK)
