#!/usr/bin/env bash
#
# Core launcher for Package Manager Health Monitor
# Usage: monitor [--config PATH] [--dry-run] [-h|--help]
set -euo pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEFAULT_CONF="${SCRIPT_DIR}/../configs/monitor.conf"

CONFIG_FILE=""
DRY_RUN=false

function usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

Options:
  -c, --config PATH    Path to config file (default: ${DEFAULT_CONF})
  -n, --dry-run        Parse config and print values without executing checks
  -h, --help           Show this help message and exit
EOF
}

# Argument parsing (unchanged)...
while [[ $# -gt 0 ]]; do
  case "$1" in
    -c|--config) CONFIG_FILE="$2"; shift 2;;
    -n|--dry-run) DRY_RUN=true; shift;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown option: $1" >&2; usage; exit 1;;
  esac
done

# Determine config file
if [[ -z "${CONFIG_FILE}" ]]; then
  CONFIG_FILE="${DEFAULT_CONF}"
fi
if [[ ! -f "${CONFIG_FILE}" ]]; then
  echo "Config file not found: ${CONFIG_FILE}" >&2
  exit 2
fi

# Load config
# shellcheck source=/dev/null
source "${CONFIG_FILE}"

# Load package checks
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/apt_check.sh"
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/yum_check.sh"
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/dnf_check.sh"

# Load notifications
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/notification.sh"

# Dry-run prints config & exit
if [[ "${DRY_RUN}" == true ]]; then
  echo "ðŸ”§ Dry-run mode. Configuration:"
  declare -p CHECK_INTERVAL EMAIL_RECIPIENT EMAIL_SUBJECT SLACK_WEBHOOK_URL SLACK_MESSAGE_PREFIX PACKAGES_TO_CHECK
  exit 0
fi

# (Later: invoke checks, call send_email/send_slack on failures)
