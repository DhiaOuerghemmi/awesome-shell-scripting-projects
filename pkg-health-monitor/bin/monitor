#!/usr/bin/env bash
#
# Core launcher for Package Manager Health Monitor
# Usage: monitor [--config PATH] [--dry-run] [-h|--help]
set -euo pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEFAULT_CONF="${SCRIPT_DIR}/../configs/monitor.conf"

CONFIG_FILE=""
DRY_RUN=false

function usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

Options:
  -c, --config PATH    Path to config file (default: ${DEFAULT_CONF})
  -n, --dry-run        Parse config and print values without executing checks
  -h, --help           Show this help message and exit
EOF
}

# 1) Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -c|--config) CONFIG_FILE="$2"; shift 2;;
    -n|--dry-run) DRY_RUN=true; shift;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown option: $1" >&2; usage; exit 1;;
  esac
done

# 2) Determine config file
[[ -z "$CONFIG_FILE" ]] && CONFIG_FILE="$DEFAULT_CONF"
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "Config file not found: $CONFIG_FILE" >&2
  exit 2
fi

# 3) Load config
# shellcheck source=/dev/null
source "$CONFIG_FILE"

# 4) Dry-run: dump config & exit
if [[ "$DRY_RUN" == true ]]; then
  echo "üîß Dry-run mode. Loaded configuration:"
  declare -p CHECK_INTERVAL EMAIL_RECIPIENT EMAIL_SUBJECT \
            SLACK_WEBHOOK_URL SLACK_MESSAGE_PREFIX PACKAGES_TO_CHECK
  exit 0
fi

# 5) Source all functionality
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/apt_check.sh"
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/yum_check.sh"
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/dnf_check.sh"
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/notification.sh"
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../scripts/cleanup.sh"

# 6) Run the checks + cleanup + notifications
for pm in ${PACKAGES_TO_CHECK}; do
  check_fn="${pm}_check"
  clean_fn="${pm}_cleanup"

  echo "‚ñ∂Ô∏è  Running initial ${pm} check..."
  if ! $check_fn; then
    echo "‚ùó Issues detected for ${pm}. Cleaning & retrying..."
    if retry_check "$check_fn" "$clean_fn"; then
      echo "‚úÖ ${pm} healthy after cleanup."
    else
      echo "‚ùå ${pm} still unhealthy after cleanup."
      msg="[${pm^}] Health check failed after cleanup"
      send_email "${EMAIL_SUBJECT}" "${msg}"
      send_slack  "${msg}"
    fi
  else
    echo "‚úÖ ${pm} is healthy."
  fi
done
